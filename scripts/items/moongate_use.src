/*
 *  Moongate script - fires when someone walks onto a moongate
 *
 *
 *  PLEASE NOTE: THIS SCRIPT IS USED FOR 'GATE' SPELL MOONGATES
 *			   Maybe this is misnamed, but that's what it's for.
 *
 *
 *  The "JustGated" flag is to keep you from bouncing between gates.
 *  MoveCharacterToLocation checks the destination location for gates,
 *	  (and traps and whatever)
 *
 *  So, when someone steps into a moongate, the following will happen:
 *	1.  An instance of MOONGATE.SRC is started.  It sets their JustGated,
 *		and transports the mobile.
 *	1a. This causes the mobile to "walk on" to the destination gate!
 *	2.  Another instance of MOONGATE.SRC is started.  It sees JustGated is
 *		set, and so clears it and exits.
 *
 *  It is assumed that gate-pairs are deleted atomically (see GATE.SRC),
 *	  hence the test for "!gate" below, after going critical - if the gates
 *	  were just destroyed, no transportation takes place.
 *
 */

use os;
use uo;

include "include/recalling";
include "include/classes";

program moongate_use( mobile, gate )

	if( mobile.npctemplate && mobile.script != "tamed" )
		return;
	endif

	var x := GetObjProperty( gate, "GateDestX" );
	var y := GetObjProperty( gate, "GateDestY" );
	var z := GetObjProperty( gate, "GateDestZ" );

	if( !x || !y )
		return;
	endif

	if( !gate || GetObjProperty( mobile, "JustGated" ) )
		EraseObjProperty( mobile, "JustGated" );
		return;
	endif

	if( !GetObjProperty(gate, "perma") && IsForbiddenAreaToRecallTo( mobile, x, y ) )
		return;
	endif
	
	var race := GetObjProperty(gate, "RaceSpecific");
	if (race && race!=mobile.title_race)
		SendSysMessage(mobile, "You must be of the " + race + " race to enter this gate.");
		return;
	endif

	var quest := GetObjProperty(gate, "QuestSpecific");
	var qcheck :=0;
	if (quest)
		var questserials := GetObjProperty(mobile, "Quester");
		if (!questserials || TypeOf(questserials) != "Array")
			return;
		endif
		foreach qser in questserials
			if (qser == quest)
				qcheck:=1;
				break;
			endif
		endforeach
		if (!qcheck)
			SendSysMessage(mobile, "You have a feeling that only questers on a certain quest may use this gate.");
			return;
		endif
	endif

	var war := GetObjProperty(gate, "WarSpecific");
	if (war && war!=GetObjProperty(mobile, "WarSerial"))
		SendSysMessage(mobile, "Only soldiers of a specific war may use this gate.");
		return;
	endif
	
	if( IsProhibitedClasseItem(mobile, gate) )
		SendSysMessage(mobile, "Your class does not permit you to enter the teleporter.");
		ReportAllowedUsers(mobile, gate);
		return;
	endif
	
	if( GetObjProperty(gate, "NoGhosts") && mobile.dead)
		SendSysMessage(mobile, "Only the living may enter this teleporter.");
		return;
	endif

	set_critical(1);
	if( MoveCharacterToLocation( mobile, x, y, z ) )
		SetObjProperty( mobile, "JustGated", 1 );
		SetSpeedCheckNote(mobile);
	endif

endprogram

function ReportAllowedUsers(mobile, gate)
	SendSysMessage(mobile, "Allowed users are as follows:");
	
	var player_level, item_level;
	
	foreach CLASSEID in {CLASSEID_BARD, CLASSEID_CRAFTER, CLASSEID_RANGER,
			      CLASSEID_MAGE, CLASSEID_THIEF, CLASSEID_WARRIOR}
		item_level := CInt(GetObjProperty(gate, CLASSEID));
		if (item_level)
			player_level := CInt(GetObjProperty(mobile, CLASSEID));
			if (item_level>0)	
				SendSysMessage(mobile, CLASSEID[3,len(CLASSEID)] + "s level " + item_level + "+");
			else
				SendSysMessage(mobile, CLASSEID[3,len(CLASSEID)] + "s below level " + (-item_level) + " (including members of other classes)");
			endif
		endif
	endforeach
endfunction