/* Champion Spawn                       			**
** Used for Champion Spawn point system 			**
** Seravy - seravy@gmail.com            			**
** Updated by GIB - jmorland.barrett@gmail.com*/

use basic;
use uo;
use util;

include "include/cmdlevel_check";
include "include/gumps";

program championspawn( who, championSpawn )

  if (!who)
    return 0;
  endif

  if (TypeOf(who) == "Array")
    championSpawn := who[2];
    who := who[1];
  endif

  detach();

  if( who.isA(POLCLASS_MOBILE) && !who.isA(POLCLASS_NPC))
    if( who.cmdlevel >= CMDLEVEL_GAME_MASTER )
      championSpawnControl(who, championSpawn, 1);
    else
      sendsysmessage( who, "You feel warmth from the stone, reacting from your touch");
    endif
  endif

  set_critical(1);
  var runningscript := GetObjProperty(championSpawn, "runningscript");
  if (runningscript)
    return;
  endif

  var active := GetObjProperty(championSpawn, "active");
  var monsters := GetObjProperty(championSpawn, "monsters");
  var numbers := GetObjProperty(championSpawn, "numbers");
  var times := GetObjProperty(championSpawn, "times");

  if (!active || !monsters || !numbers || !times)
    EraseObjProperty( championSpawn, "runningscript");
    SetObjProperty( championSpawn, "status", "Nothing Set");
    return;
  endif

  SetObjProperty(championSpawn, "runningscript", 1);
  set_critical(0);

  var resetCounter := GetObjProperty(championSpawn, "resetCounter");

  var resetHours := GetObjProperty(championSpawn, "resetHours");
  if (!resetHours)
    resetHours := 4;
  endif

  if (!resetCounter)
    SetObjProperty( championSpawn, "resetCounter", ReadGameClock());
  elseif ((resetCounter + (60 * 60 * resetHours)) < ReadGameClock())
    SetObjProperty( championSpawn, "status", "Running Hours reset");
    resetSpawn( championSpawn);
    SetObjProperty( championSpawn, "resetCounter", ReadGameClock());
    EraseObjProperty( championSpawn, "runningscript");
    return 1;
  endif

  var spawned := GetObjProperty(championSpawn, "spawned");
  var level := GetObjProperty(championSpawn, "level");
  var waittime := GetObjProperty(championSpawn, "waittime");
  var gcenabled := GetObjProperty(championSpawn, "gcenable");
  var gcchance := GetObjProperty(championSpawn, "gcchance");

  if (!spawned)
    spawned := {};
  endif
  if (!level)
    level := 1;
  endif
  if (!waittime)
    waittime := 0;
  endif
  //broadcast("waittime: "+waittime); //DEBUG MESSAGES
  //broadcast("clock: "+ReadGameClock()); //DEBUG MESSAGES

  if (!monstersAlive( spawned, championSpawn))
    if (waittime < ReadGameClock())
   
      changeSkulls(level, championSpawn);

      dispelSpawn(championSpawn);

			//RESET BLOCK//
      if ((!gcenabled || gcenabled == 0) && level == 6 && GetObjProperty(championSpawn, "nextRunWait"))
        level := 1;
        SetObjProperty( championSpawn, "level", level);
        endSeq( championSpawn);
      elseif (gcenabled == 1 && level == 7 && GetObjProperty(championSpawn, "nextRunWait" ) && GetObjProperty(championSpawn, "gcspawned"  ) == 1)
        level := 1;
        SetObjProperty( championSpawn, "level", level);
        EraseObjProperty( championSpawn, "gcspawned");
        endSeq( championSpawn);
      elseif ((gcenabled == 1 && level == 6 && GetObjProperty(championSpawn, "nextRunWait" ) && ( !GetObjProperty(championSpawn, "gcspawned"  ) || GetObjProperty(championSpawn, "gcspawned"  ) != 1 )) && RandomInt(100) > gcchance)
        level := 1;
        SetObjProperty( championSpawn, "level", level);
        endSeq( championSpawn);
      endif
      if (setTimer(championSpawn, times, level))
        createMonsters(level, monsters, numbers, championSpawn);
      else
        waittime := GetObjProperty(championSpawn, "waittime");
        sleep( waittime - ReadGameClock() + 1);
    		EraseObjProperty( championSpawn, "runningscript");
        Start_Script(":championspawn:championspawn", { 0, championSpawn });
      endif

    else
      sleep( waittime - ReadGameClock() + 1);
    	EraseObjProperty( championSpawn, "runningscript");
      Start_Script(":championspawn:championspawn", { 0, championSpawn });
    endif
  endif

  EraseObjProperty( championSpawn, "runningscript");

endprogram


/* Creates the monsters depending on **
** the level for the spawn           */
function createMonsters( level, monsters, numbers, championSpawn)
  var spawned := {};
  var monsterMade := 0;
  var gctext:= GetObjProperty(championSpawn, "gctext");
  var gcloot:= GetObjProperty(championSpawn, "gcloot");
  SetObjProperty( championSpawn, "status", "Spawning Level: "+level);
  while (monsters[level] == "nothing")
    if (level >= 6)
      if (monsters[1] != "nothing")
        level := 1;
      else
        return 0;
      endif
    else
      level := level + 1;
    endif
  endwhile

  var spawnLoc := { championSpawn.x, championSpawn.y, championSpawn.z };
  var noLoot := GetObjProperty(championSpawn, "noLoot");
  set_critical(1);
  for  i := 1 to numbers[level];
    spawnLoc := getSpawnLocation(championSpawn);
    monsterMade := CreateNpcFromTemplate( monsters[level], spawnLoc[1], spawnLoc[2], spawnLoc[3]);
    if (!monsterMade)
      monsterMade := CreateNpcFromTemplate( monsters[level], championSpawn.x, championSpawn.y, championSpawn.z);
      if (!monsterMade)
        foreach person in EnumerateOnlineCharacters()
          if (person.cmdlevel > 1)
            broadcast("Error making the "+i+" Champion Spawn template, '"+monsters[level]+"' at "+championSpawn.x+", "+championSpawn.y+", "+championSpawn.z+". Please Fix!", 3, 38);
          endif
        endforeach
      else
        spawned.append(monsterMade.serial);
      endif
    else
      SetObjProperty( monsterMade, "AtDeathScript", ":championspawn:refreshspawns" );
      SetObjProperty( monsterMade, "championSpawn", championspawn.serial );
      if (noLoot && level != 6)
        SetObjProperty(monsterMade, "noloot", 1 );
        SetObjProperty(monsterMade, "guardkill", 1 );
      endif
      if (level == 6)
      	if (gcloot != 1)
        	SetObjProperty(monsterMade, "noloot", 1 );
        	SetObjProperty(monsterMade, "guardkill", 1 );
        endif
      	SetObjProperty(championSpawn, "gcspawned", 1 );
      endif
      
      SetObjProperty(monsterMade, "untamable", 1 );

      spawned.append(monsterMade.serial);
    endif
    if( level == 6 )
    	sleepms(500);
      PrintTextAbove( monsterMade,gctext,3,38 );
     endif
  endfor
  set_critical(0);

  SetObjProperty( championSpawn, "spawned", spawned);
  SetObjProperty( championSpawn, "nextRunWait", level);

  if (level > 6)
    level := 1;
  else
    level := level + 1;
  endif

  SetObjProperty( championSpawn, "level", level);

  //SetObjProperty( championSpawn, "waittime", ReadGameClock()+times[level]-1);


  return monsterMade;
endfunction


/* Gets a random location for the **
** monster to spawn at.           */
function getSpawnLocation(championSpawn)
  var spawnLocation := { championSpawn.x, championSpawn.y, championSpawn.z };
  var radius := GetObjProperty(championSpawn, "radius");
  var checkLOS := GetObjProperty(championSpawn, "checkLOS");
  var times := 0;

  if (radius)
    var yMod := RandomInt(CInt(radius*2))-radius;
    var XMod := RandomInt(CInt(radius*2))-radius;
    spawnLocation := { championSpawn.x+xMod, championSpawn.y+yMod, championSpawn.z };

    if (checkLOS)
      while (times < 5 || !CheckLosAt( championSpawn, spawnLocation[1], spawnLocation[2], spawnLocation[3] ))

        yMod := RandomInt(CInt(radius*2))-radius;
        XMod := RandomInt(CInt(radius*2))-radius;
        spawnLocation := { championSpawn.x+xMod, championSpawn.y+yMod, championSpawn.z };
        times := times + 1;
      endwhile

    endif

  endif
  


  return spawnLocation;
endfunction


/* Sets the timer for next monsters **
** to spawn.                         */
function setTimer(championSpawn, times, level)
  SetObjProperty( championSpawn, "status", "Setting Time for level: "+level);
  var timerLevel := GetObjProperty(championSpawn, "nextRunWait");
	var addtime := times[timerLevel];
	
	/* DEBUG BLOCK
	broadcast("level: "+level);
	broadcast("level timer: "+timerLevel);
	broadcast("addtime: "+addtime); 
	*/
	if( timerLevel == 5 && level == 1 )
		addtime := addtime + times[timerLevel+1];
	elseif( timerLevel == 6 && level == 1 )
		addtime := addtime + times[timerLevel-1];
	endif
	
  if (timerLevel)
    SetObjProperty( championSpawn, "waittime", ReadGameClock()+addtime);
    SetObjProperty( championSpawn, "nextRunWait", 0);
    //Broadcast(" Waiting for " + addtime + " seconds."); // DEBUG MESSAGE

    return 0;
  else
    SetObjProperty( championSpawn, "nextRunWait", level);
    return 1;
  endif
  
endfunction


/* Changes the colour of the skulls  **
** depending on the level            */
function changeSkulls(level, championSpawn)
  var skulls := GetObjProperty(championSpawn, "skulls");
  var tempskull;
  if (!skulls)
    return 0;
  endif
  if (skulls.size() < 4)
    return 0;
  endif
  for i := 1 to skulls.size()
    skulls[i] := SystemFindObjectBySerial(skulls[i]);
  endfor

//  Broadcast(" Changing skulls to level " + level + " with activemonster:"+!GetObjProperty(championSpawn, "nextRunWait")); // DEBUG MESSAGE

  var colours := GetObjProperty(championSpawn, "colours");
  if (!colours)
    colours := {{ 0, 1383, 1400 },{ 0, 1383, 1400 },{ 0, 1383, 1400 },{ 0, 1383, 1400 },{ 0, 1383, 1400 }};
  endif

  for i := 1 to level // Finished
  	tempskull := colours[i];
    skulls[i].color := tempskull[2];
  endfor
  if (level <= skulls.size())
    for i := level to skulls.size() // To be done
  	tempskull := colours[i];
    skulls[i].color := tempskull[1];
    endfor
  endif
  if (level > 0 && !GetObjProperty(championSpawn, "nextRunWait") && (level <= skulls.size())) // Active
    PlayLightningBoltEffect(skulls[level]);
    PlaySoundEffect( skulls[level], 0x2A );
  	tempskull := colours[level];
    skulls[level].color := tempskull[3];
  endif
return 1;
endfunction

/* Checks to see if its the end, and      **
** if it is, it does the required trigger */
function endSeq(championSpawn)
  SetObjProperty( championSpawn, "status", "Starting end sequence");
  var gatedest := GetObjProperty(championSpawn, "gatedest");
  var unlock := GetObjProperty(championSpawn, "unlock");
  var script := GetObjProperty(championSpawn, "script");
  var endDuration := GetObjProperty(championSpawn, "endDuration");

  if (script)
    Start_Script( script);
  endif

  if (!endDuration)
    endDuration := 30;
  endif
  if (unlock || (cInt(gatedest[1])+cInt(gatedest[2])+cInt(gatedest[3]) > 0))
    var unlockItem;
    var portalGate;
    var destGate;
    var i;

    if (unlock)
      unlockItem := SystemFindObjectBySerial(unlock);
      if (unlockItem)
        PrintTextAbove( unlockItem, "*Unlocked*");
        PlaySoundEffect( unlockItem, 0x200 );
        unlockItem.locked := 0;
      endif
    endif
    if (gatedest[1] && gatedest[2])
      set_critical( 1 );
      portalGate := CreateItemAtLocation( championSpawn.x, championSpawn.y, championSpawn.z, 0x0f6c, 1 );
      if (!portalGate) return; endif
      SetObjProperty( portalGate, "GateDestX", cInt(gatedest[1]) );
      SetObjProperty( portalGate, "GateDestY", cInt(gatedest[2]) );
      SetObjProperty( portalGate, "GateDestZ", cInt(gatedest[3]) );
      SetObjProperty( portalGate, "perma", 1);
      set_critical( 0 );
      PlaySoundEffect( portalGate,  0x020f );
      
      if (gatedest[4] == 1)
      set_critical( 1 );
        destGate := CreateItemAtLocation( cInt(gatedest[1]), cInt(gatedest[2]), cInt(gatedest[3]), 0x0f6c, 1 );
        SetObjProperty( destGate, "GateDestX", championSpawn.x );
        SetObjProperty( destGate, "GateDestY", championSpawn.y );
        SetObjProperty( destGate, "GateDestZ", championSpawn.z );
        SetObjProperty( destGate, "perma", 1);
        set_critical( 0 );
        PlaySoundEffect( destGate,  0x020f );
      else
        destGate := portalGate;
      endif

      for( i := 6899; i <= 6907; i := i+1 )
        portalGate.graphic := i;
        destGate.graphic := i;
        sleepms( 150 );
      endfor
      portalGate.graphic := 0x0f6c;
      destGate.graphic := 0x0f6c;

    endif


    sleep( endDuration - 10);

    for (i := 10; i >= 0; i := i - 2)
      if (unlockItem)
        PrintTextAbove( unlockItem, "*"+i+"*");
      endif

      if (portalGate)
        PrintTextAbove( portalGate, "*"+i+"*");
      endif

      if (destGate)
        PrintTextAbove( destGate, "*"+i+"*");
      endif

      sleep(2);
    endfor

    if (unlockItem)
      PrintTextAbove( unlockItem, "*Locked*");
      PlaySoundEffect( unlockItem, 0x200 );
      unlockItem.locked := 1;
    endif
    if (portalGate)
      for( i := 6907; i >= 6899; i := i-1 )
        portalGate.graphic := i;
        destGate.graphic := i;
        sleepms( 150 );
      endfor
      DestroyItem( portalGate );
      DestroyItem( destGate );
    endif
	else
		sleep( endDuration );
  endif
  
  SetObjProperty( championSpawn, "resetCounter", ReadGameClock());
  SetObjProperty( championSpawn, "status", "Finished end sequence");
  return 1;
endfunction


/* Checks if monsters are alive at a spawn **
** returns true if there are, else false   */
function monstersAlive( spawned, championSpawn)

  var tempspawns := {};
  var tempnpc;
	//broadcast( "lens: "+ cint(spawned.size()));
  foreach spawn in spawned
    //broadcast("spawned: "+spawn);
  	tempnpc := SystemFindObjectBySerial(spawn);
    if (getobjproperty(tempnpc, "championSpawn") == cint(championSpawn.serial))
   // broadcast("temp: "+tempnpc.serial);
      tempspawns.append(tempnpc.serial);
    endif
  endforeach
	//broadcast( "lent: "+ cint(tempspawns.size()));

  SetObjProperty( championSpawn, "spawned", tempspawns);

  if (tempspawns.size() <= 0)
    return 0;
  else
    return 1;
  endif
endfunction


/* Resets all spawn parameters   */
function dispelSpawn( championSpawn)
  var dispel := GetObjProperty(championSpawn, "dispel");
  if (!dispel)
    dispel := 0;
  endif

  var items := ListItemsNearLocation(championSpawn.x, championSpawn.y, championSpawn.z, dispel);
  foreach item in items
    if( GetObjProperty(item, "f") )
      PlayStationaryEffect( championSpawn.x, championSpawn.y, championSpawn.z, 0x3728, 0xa, 0xa );
      DestroyItem(item);
    endif
  endforeach


endfunction


/* Resets all spawn parameters   */
function resetSpawn( championSpawn)
  SetObjProperty( championSpawn, "status", "Resetting Spawn");
  SetObjProperty(championSpawn, "level", 0);
  SetObjProperty(championSpawn, "waittime", 0);
  SetObjProperty( championSpawn, "nextRunWait", 0);
  changeSkulls(0, championSpawn);

  var spawned := GetObjProperty(championSpawn, "spawned");
  var tempMonster;
  foreach spawn in spawned
    tempMonster := SystemFindObjectBySerial(spawn);
    if (tempMonster)
      SetObjProperty( tempMonster, "summoned", 1);
      RevokePrivilege( tempMonster, PRIVILEGEID_INVULNERABLE );
      ApplyRawDamage( tempMonster, GetHp(tempMonster)+3 );
    endif
  endforeach
  SetObjProperty( championSpawn, "spawned", {});
  EraseObjProperty( championSpawn, "runningscript");
  SetObjProperty( championSpawn, "status", "Spawn Reset");
endfunction


/* Champion Spawn Control Gump          **
** Used for managing the Champion Spawn **
** point system by setting up cprops etc**
** Seravy - seravy@gmail.com            **
******************************************
** Updated by GIB - jono@benme.com.au   */
function championSpawnControl( who, championSpawn, page)

var page1, page2, page3,page4,page5,page6,page7,page8;
	case(page)
		1:
		page1 := 1;		page2 := 2;		page3 := 3;		page4 := 4;		page5 := 5;		page6 := 6; page7:= 7; page8:= 8;
		2:
		page1 := 2;		page2 := 1;		page3 := 3;		page4 := 4;		page5 := 5;		page6 := 6; page7:= 7; page8:= 8;
		3:
		page1 := 3;		page2 := 2;		page3 := 1;		page4 := 4;		page5 := 5;		page6 := 6; page7:= 7; page8:= 8;
		4:
		page1 := 4;		page2 := 2;		page3 := 3;		page4 := 1;		page5 := 5;		page6 := 6; page7:= 7; page8:= 8;
		5:
		page1 := 5;		page2 := 2;		page3 := 3;		page4 := 4;		page5 := 1;		page6 := 6; page7:= 7; page8:= 8;
		6:
		page1 := 6;		page2 := 2;		page3 := 3;		page4 := 4;		page5 := 5;		page6 := 1; page7:= 7; page8:= 8;
		7:
		page1 := 7;		page2 := 2;		page3 := 3;		page4 := 4;		page5 := 5;		page6 := 6; page7:= 1; page8:= 8;
		8:
		page1 := 8;		page2 := 2;		page3 := 3;		page4 := 4;		page5 := 5;		page6 := 6; page7:= 7; page8:= 1;
	endcase
	
  var active := GetObjProperty(championSpawn, "active");
  var monsters := GetObjProperty(championSpawn, "monsters");
  var numbers := GetObjProperty(championSpawn, "numbers");
  var times := GetObjProperty(championSpawn, "times");
  var radius := GetObjProperty(championSpawn, "radius");
  var noLoot := GetObjProperty(championSpawn, "noLoot");
  var checkLOS := GetObjProperty(championSpawn, "checkLOS");
  var dispel := GetObjProperty(championSpawn, "dispel");

  var gcchance := GetObjProperty(championSpawn, "gcchance");
  var gcenable := GetObjProperty(championSpawn, "gcenable");
  var gcloot := GetObjProperty(championSpawn, "gcloot");
  var gctext := GetObjProperty(championSpawn, "gctext");
  var gatedest := GetObjProperty(championSpawn, "gatedest");
  var unlock := GetObjProperty(championSpawn, "unlock");
  var script := GetObjProperty(championSpawn, "script");
  var notifiers := GetObjProperty(championSpawn, "skulls");
  var notifiercolours := GetObjProperty(championSpawn, "colours");
  var endDuration := GetObjProperty(championSpawn, "endDuration");
  var resetHours := GetObjProperty(championSpawn, "resetHours");
  var currentcolours;
  var monster1, monster2, monster3, monster4, monster5, monster6;
	var amount1 := 0, amount2 := 0, amount3 := 0, amount4 := 0, amount5 := 0, amount6 := 0;
	var timer1 := 0, timer2 := 0, timer3 := 0, timer4 := 0, timer5 := 0, timer6 := 0;
	var notifier1 := 0, notifier2 := 0, notifier3 := 0, notifier4 := 0, notifier5 := 0;
	var setcolour1 := array{ 0, 1383, 1400 }, setcolour2  := array{ 0, 1383, 1400 }, setcolour3 := array{ 0, 1383, 1400 }, setcolour4 := array{ 0, 1383, 1400 }, setcolour5 := array{ 0, 1383, 1400 };
	var activeString;
	var activeColour;
	var newgctext;

	if (!resetHours)
	  resetHours := 4;
	endif
	if (!monsters || TypeOf(monsters) <> "Array" || monsters.size() < 5)
	  monsters := {};
	  for i := 1 to 6
	    monsters[i] := "nothing";
	  endfor
	elseif (monsters.size() == 5)
	monsters[6] := "nothing";
	endif
	
	if (!gcenable || gcenable == 0)
	  gcenable := 0;
	  gcchance := 0;
	endif
	
	if (!gctext)
	  gctext := "Who summons me?";
	endif
	
	if (!gcchance)
	  gcchance := 0;
	endif
	
	if (!notifiercolours || TypeOf(notifiercolours) <> "Array" || notifiercolours.size() < 3)
	  notifiercolours := {};
	  for i := 1 to 5
	    notifiercolours[i] := { 0, 1383, 1400 };
	  endfor
	elseif (notifiercolours.size == 3)
	  foreach colour in notifiercolours
	  	currentcolours.append( colour );
	  endforeach
	  notifiercolours := { currentcolours, currentcolours, currentcolours, currentcolours, currentcolours };
	  currentcolours := 0;
	endif
	if (!notifiers || TypeOf(notifiers) <> "Array" || notifiers.size() < 5)
	  notifiers := {};
	  for i := 1 to 5
	    notifiers[i] := 0;
	  endfor
	endif
	if (!numbers || TypeOf(numbers) <> "Array" || numbers.size() < 5)
	  numbers := {};
	  for i := 1 to 6
	    numbers[i] := 13-(i*2);
	  endfor
	elseif (numbers.size() == 5)
		numbers[6] := 1;
	endif
	if (!times || TypeOf(times) <> "Array" || times.size() < 5)
	  times := {};
	  for i := 1 to 6
	    times[i] := CInt((i*10)/2);
	  endfor
	elseif (times.size() == 5)
		times[6] := 120;
	endif
	if (!gatedest || TypeOf(gatedest) <> "Array" || gatedest.size() < 3)
	  gatedest := {};
	  for i := 1 to 3
	    gatedest[i] := 0;
	  endfor
	endif
	if (!unlock)
	  unlock := 0;
	endif
	if (!script)
	 script := "";
	endif
	if (!endDuration)
	  endDuration := 0;
	endif
	if (!active || active == 0 )
	  active := 0;
	  activeString := "Activate";
	  activeColour := 38;
	elseif (active == 1)
	  activeString := "Deactivate";
	  activeColour := 63;
	endif
	if (!noLoot)
	  noLoot := 0;
	endif
	if (!checkLOS)
	  checkLOS := 0;
	endif
	if (!radius)
	  radius := 0;
	endif
	if (!dispel)
	  dispel := 0;
	endif
	if (!gatedest[4])
	  gatedest[4] := 0;
	endif

	GFInitGump( 10 , 10 );
	GFPage(0);
	GFNoDispose();
	GFResizePic(0, 0, BKGND_STONESLAB, 400, 330);
	GFCheckerTrans(3, 3, 394, 20); // Top trans
	GFCheckerTrans(3, 26, 90, 273); // Left Trans
	GFCheckerTrans(96, 26 , 300, 273); // Right Trans
	GFCheckerTrans(3, 302, 394, 25); // Bottom Trans
	GFTextMid(10, 1, 380, 53, "Champion Spawn Control v2.0");
	
	GFTextLine(35, 50, 63, "Round 1");
	GFTextLine(35, 80, 63, "Round 2");
	GFTextLine(35, 110, 63, "Round 3");
	GFTextLine(35, 140, 63, "Round 4");
	GFTextLine(35, 170, 63, "Round 5");
	GFTextLine(35, 200, 63, "GChampion");
	GFTextLine(35, 230, 63, "General");
	GFTextLine(35, 260, 63, "End");
	GFTextLine(35, 300, activeColour, activeString);

	
	var Round1Button := GFButtonID( 20, 55, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var Round2Button := GFButtonID( 20, 85, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var Round3Button := GFButtonID( 20, 115, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var Round4Button := GFButtonID( 20, 145, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var Round5Button := GFButtonID( 20, 175, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var Round6Button := GFButtonID( 20, 205, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var GeneralButton := GFButtonID( 20, 235, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var EndSeqButton := GFButtonID( 20, 265, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var ActivateButton := GFButtonID( 20, 305, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
	var exitButton := GFButtonID( 340, 303, G_BUTTON_CANCEL_0, G_BUTTON_CANCEL_1, 1 );
	var linecount := 30;
	

	GFPage(page1); //Round 1 Control*******************************************************************
	currentcolours := notifiercolours[1];
	GFTextLine(100, linecount, 63, "Monster Template:");	
			linecount := linecount + 15;
	monster1 := GFTextEntry( 100, linecount, 95, 20, 39, text := monsters[1] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Amount:");	
			linecount := linecount + 15;
	amount1 := GFTextEntry( 100, linecount, 95, 20, 39, text := numbers[1] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Time Until Next:");	
			linecount := linecount + 15;
	timer1 := GFTextEntry( 100, linecount, 95, 20, 39, text := times[1] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Serial:");	
			linecount := linecount + 15;
	notifier1 := GFTextEntry( 100, linecount, 95, 20, 39, text := notifiers[1] );
  var note1Button := GFButtonID( 180, linecount+3, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Colours:");
			linecount := linecount +15;			
	GFTextLine(100, linecount, 63, "Before:");
	setcolour1[1] := GFTextEntry( 145, linecount, 65, 20, 39, text := currentcolours[1] );
	GFTextLine(190, linecount, 63, "During:");
	setcolour1[2] := GFTextEntry( 235, linecount, 65, 20, 39, text := currentcolours[2] );
	GFTextLine(295, linecount, 63, "After:");
	setcolour1[3] := GFTextEntry( 335, linecount, 65, 20, 39, text := currentcolours[3] );
			linecount := linecount + 25;
			
	GFPage(page2); //Round 2 Control*******************************************************************
	
	linecount := 30;
	currentcolours := notifiercolours[2];
	GFTextLine(100, linecount, 63, "Monster Template:");	
			linecount := linecount + 15;
	monster2 := GFTextEntry( 100, linecount, 95, 20, 39, text := monsters[2] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Amount:");	
			linecount := linecount + 15;
	amount2 := GFTextEntry( 100, linecount, 95, 20, 39, text := numbers[2] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Time Until Next:");	
			linecount := linecount + 15;
	timer2 := GFTextEntry( 100, linecount, 95, 20, 39, text := times[2] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Serial:");	
			linecount := linecount + 15;
	notifier2 := GFTextEntry( 100, linecount, 95, 20, 39, text := notifiers[2] );
  var note2Button := GFButtonID( 180, linecount+3, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Colours:");
			linecount := linecount +15;			
	GFTextLine(100, linecount, 63, "Before:");
	setcolour2[1] := GFTextEntry( 145, linecount, 65, 20, 39, text := currentcolours[1] );
	GFTextLine(190, linecount, 63, "During:");
	setcolour2[2] := GFTextEntry( 235, linecount, 65, 20, 39, text := currentcolours[2] );
	GFTextLine(295, linecount, 63, "After:");
	setcolour2[3] := GFTextEntry( 335, linecount, 65, 20, 39, text := currentcolours[3] );
			linecount := linecount + 25;
			
	GFPage(page3); //Round 3 Control*******************************************************************
	
	linecount := 30;
	currentcolours := notifiercolours[3];
	GFTextLine(100, linecount, 63, "Monster Template:");	
			linecount := linecount + 15;
	monster3 := GFTextEntry( 100, linecount, 95, 20, 39, text := monsters[3] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Amount:");	
			linecount := linecount + 15;
	amount3 := GFTextEntry( 100, linecount, 95, 20, 39, text := numbers[3] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Time Until Next:");	
			linecount := linecount + 15;
	timer3 := GFTextEntry( 100, linecount, 95, 20, 39, text := times[3] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Serial:");	
			linecount := linecount + 15;
	notifier3 := GFTextEntry( 100, linecount, 95, 20, 39, text := notifiers[3] );
  var note3Button := GFButtonID( 180, linecount+3, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Colours:");
			linecount := linecount +15;			
	GFTextLine(100, linecount, 63, "Before:");
	setcolour3[1] := GFTextEntry( 145, linecount, 65, 20, 39, text := currentcolours[1] );
	GFTextLine(190, linecount, 63, "During:");
	setcolour3[2] := GFTextEntry( 235, linecount, 65, 20, 39, text := currentcolours[2] );
	GFTextLine(295, linecount, 63, "After:");
	setcolour3[3] := GFTextEntry( 335, linecount, 65, 20, 39, text := currentcolours[3] );
			linecount := linecount + 25;
			
	GFPage(page4); //Round 4 Control*******************************************************************
	
	linecount := 30;
	currentcolours := notifiercolours[4];
	GFTextLine(100, linecount, 63, "Monster Template:");	
			linecount := linecount + 15;
	monster4 := GFTextEntry( 100, linecount, 95, 20, 39, text := monsters[4] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Amount:");	
			linecount := linecount + 15;
	amount4 := GFTextEntry( 100, linecount, 95, 20, 39, text := numbers[4] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Time Until Next:");	
			linecount := linecount + 15;
	timer4 := GFTextEntry( 100, linecount, 95, 20, 39, text := times[4] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Serial:");	
			linecount := linecount + 15;
	notifier4 := GFTextEntry( 100, linecount, 95, 20, 39, text := notifiers[4] );
  var note4Button := GFButtonID( 180, linecount+3, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Colours:");
			linecount := linecount +15;			
	GFTextLine(100, linecount, 63, "Before:");
	setcolour4[1] := GFTextEntry( 145, linecount, 65, 20, 39, text := currentcolours[1] );
	GFTextLine(190, linecount, 63, "During:");
	setcolour4[2] := GFTextEntry( 235, linecount, 65, 20, 39, text := currentcolours[2] );
	GFTextLine(295, linecount, 63, "After:");
	setcolour4[3] := GFTextEntry( 335, linecount, 65, 20, 39, text := currentcolours[3] );
			linecount := linecount + 25;
			
	GFPage(page5); //Round 5 Control*******************************************************************
	
	linecount := 30;
	currentcolours := notifiercolours[5];
	GFTextLine(100, linecount, 63, "Monster Template:");	
			linecount := linecount + 15;
	monster5 := GFTextEntry( 100, linecount, 95, 20, 39, text := monsters[5] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Amount:");	
			linecount := linecount + 15;
	amount5 := GFTextEntry( 100, linecount, 95, 20, 39, text := numbers[5] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Time Until Next:");	
			linecount := linecount + 15;
	timer5 := GFTextEntry( 100, linecount, 95, 20, 39, text := times[5] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Serial:");	
			linecount := linecount + 15;
	notifier5 := GFTextEntry( 100, linecount, 95, 20, 39, text := notifiers[5] );
  var note5Button := GFButtonID( 180, linecount+3, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Notifier Colours:");
			linecount := linecount +15;			
	GFTextLine(100, linecount, 63, "Before:");
	setcolour5[1] := GFTextEntry( 145, linecount, 65, 20, 39, text := currentcolours[1] );
	GFTextLine(190, linecount, 63, "During:");
	setcolour5[2] := GFTextEntry( 235, linecount, 65, 20, 39, text := currentcolours[2] );
	GFTextLine(295, linecount, 63, "After:");
	setcolour5[3] := GFTextEntry( 335, linecount, 65, 20, 39, text := currentcolours[3] );
			linecount := linecount + 25;
	
	GFPage(page6); //Grand Champion Control*******************************************************************
			

	linecount := 30;
	GFTextLine(100, linecount, 63, "Grand Champion(s):");	
			linecount := linecount + 25;
	GFTextLine(100, linecount, 63, "Enabled:");	
  var newgcenable := GFCheckBox( 150, linecount, G_GRAY_CHECKBOX_0, G_GRAY_CHECKBOX_1, cint(gcenable) );
			linecount := linecount + 25;
			
			
	GFTextLine(100, linecount, 63, "chance:  (%)");	
 	linecount := linecount + 15;
  var newgcchance := GFTextEntry( 100, linecount, 95, 20, 39, text := gcchance );
	linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "template:");	
			linecount := linecount + 15;
	monster6 := GFTextEntry( 100, linecount, 95, 20, 39, text := monsters[6] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Amount:");	
			linecount := linecount + 15;
	amount6 := GFTextEntry( 100, linecount, 95, 20, 39, text := numbers[6] );
			linecount := linecount + 25;
			
	GFTextLine(100, linecount, 63, "Time Until End:");	
			linecount := linecount + 15;
	timer6 := GFTextEntry( 100, linecount, 95, 20, 39, text := times[6] );
			linecount := linecount + 25;
	GFTextLine(100, linecount, 63, "Loot On:");	
  var newgcloot := GFCheckBox( 150, linecount, G_GRAY_CHECKBOX_0, G_GRAY_CHECKBOX_1, cint(gcloot) );
			linecount := linecount + 25;
	GFTextLine(100, linecount, 63, "Say on Spawn:");	
			linecount := linecount + 15;
	newgctext := GFTextEntry( 100, linecount, 155, 20, 39, text := gctext );
			linecount := linecount + 25;
	
	GFPage(page7); //General Control*******************************************************************
  	
  
	linecount := 30;
	GFTextLine(100, linecount, 63, "Spawn Radius:");	
 	linecount := linecount + 15;
  var newradius := GFTextEntry( 100, linecount, 95, 20, 39, text := radius );
	linecount := linecount + 25;
	
	GFTextLine(100, linecount, 63, "No Loot:");	
 	linecount := linecount + 15;
  var newnoLoot := GFCheckBox( 100, linecount+3, G_GRAY_CHECKBOX_0, G_GRAY_CHECKBOX_1, cint(noLoot) );
	linecount := linecount + 25;
	
	GFTextLine(100, linecount, 63, "Check LOS:");	
 	linecount := linecount + 15;
  var newcheckLOS := GFCheckBox( 100, linecount+3, G_GRAY_CHECKBOX_0, G_GRAY_CHECKBOX_1, cint(checkLOS) );
	linecount := linecount + 25;
	GFTextLine(100, linecount, 63, "Dispel Walls:");	
 	linecount := linecount + 15;
  var newdispel := GFTextEntry( 100, linecount, 95, 20, 39, text := dispel );
	linecount := linecount + 25;
	GFTextLine(100, linecount, 63, "Spawn Reset Time(hours):");	
 	linecount := linecount + 15;
  var newresetHours := GFTextEntry( 100, linecount, 95, 20, 39, text := resetHours );
	linecount := linecount + 25;
	
	GFPage(page8);//End Control*******************************************************************
	linecount := 30;
	
	GFTextLine(100, linecount, 63, "Gate Dest: (XYZ)");	
 	linecount := linecount + 15;
  var newgatedestx := GFTextEntry( 100, linecount, 45, 20, 39, text := gatedest[1] );
  var newgatedesty := GFTextEntry( 150, linecount, 45, 20, 39, text := gatedest[2] );
  var newgatedestz := GFTextEntry( 200, linecount, 45, 20, 39, text := gatedest[3] );
 	linecount := linecount + 15;
	GFTextLine(100, linecount, 63, "Return Gate:");	
 	linecount := linecount + 15;
  var newreturngate := GFCheckBox( 100, linecount+3, G_GRAY_CHECKBOX_0, G_GRAY_CHECKBOX_1, cint(gatedest[4]) ); //return gate
 	linecount := linecount + 30;
 	
	GFTextLine(100, linecount, 53, "And/Or");	
 	linecount := linecount + 15;
 	
	GFTextLine(100, linecount, 63, "Unlock Container: (Serial)");	
 	linecount := linecount + 15;	
  var newunlock := GFTextEntry( 100, linecount, 45, 20, 39, text := unlock );
  var unlockButton := GFButtonID( 170, linecount+3, G_BLUE_SMALL_CIRCLE_0, G_BLUE_SMALL_CIRCLE_1, 1 );
  
 	linecount := linecount + 30;	
	GFTextLine(100, linecount, 53, "And/Or");	
 	linecount := linecount + 15;
	GFTextLine(100, linecount, 63, "Run Script:");	
 	linecount := linecount + 15;	
  var newscript := GFTextEntry( 100, linecount, 45, 20, 39, text := script );
  
 	linecount := linecount + 15;	
	GFTextLine(100, linecount, 53, "And/Or");	
  linecount := linecount + 15;
	GFTextLine(100, linecount, 63, "End Duration: (Time till reset)");	
 	linecount := linecount + 15;	
  var newendDuration := GFTextEntry( 100, linecount, 45, 20, 39, text := endDuration );

// **************************************************END OF GUMP**********************************************************
	var choice := GFSendGump(who);


monsters := { GFExtractData(monster1.keyid, choice)  , GFExtractData(monster2.keyid, choice) , GFExtractData(monster3.keyid, choice) , GFExtractData(monster4.keyid, choice) , GFExtractData(monster5.keyid, choice) , GFExtractData(monster6.keyid, choice) };

var thecolour1 := {cInt(GFExtractData(setcolour1[1].keyid, choice)), cInt(GFExtractData(setcolour1[2].keyid, choice)), cInt(GFExtractData(setcolour1[3].keyid, choice))};
var thecolour2 := {cInt(GFExtractData(setcolour2[1].keyid, choice)), cInt(GFExtractData(setcolour2[2].keyid, choice)), cInt(GFExtractData(setcolour2[3].keyid, choice))};
var thecolour3 := {cInt(GFExtractData(setcolour3[1].keyid, choice)), cInt(GFExtractData(setcolour3[2].keyid, choice)), cInt(GFExtractData(setcolour3[3].keyid, choice))};
var thecolour4 := {cInt(GFExtractData(setcolour4[1].keyid, choice)), cInt(GFExtractData(setcolour4[2].keyid, choice)), cInt(GFExtractData(setcolour4[3].keyid, choice))};
var thecolour5 := {cInt(GFExtractData(setcolour5[1].keyid, choice)), cInt(GFExtractData(setcolour5[2].keyid, choice)), cInt(GFExtractData(setcolour5[3].keyid, choice))};

SetObjProperty(championSpawn, "monsters", monsters);
SetObjProperty(championSpawn, "gcchance", cInt(GFExtractData(newgcchance.keyid, choice)));
SetObjProperty(championSpawn, "gctext", GFExtractData(newgctext.keyid, choice));
numbers := { cInt(GFExtractData(amount1.keyid, choice)) , cInt(GFExtractData(amount2.keyid, choice)) , cInt(GFExtractData(amount3.keyid, choice)) , cInt(GFExtractData(amount4.keyid, choice)) , cInt(GFExtractData(amount5.keyid, choice)) , cInt(GFExtractData(amount6.keyid, choice)) };
SetObjProperty(championSpawn, "numbers", numbers);
notifiers := { cInt(GFExtractData(notifier1.keyid, choice)) , cInt(GFExtractData(notifier2.keyid, choice)) , cInt(GFExtractData(notifier3.keyid, choice)) , cInt(GFExtractData(notifier4.keyid, choice)) , cInt(GFExtractData(notifier5.keyid, choice)) };
times := { cInt(GFExtractData(timer1.keyid, choice)) , cInt(GFExtractData(timer2.keyid, choice)) , cInt(GFExtractData(timer3.keyid, choice)) , cInt(GFExtractData(timer4.keyid, choice)) , cInt(GFExtractData(timer5.keyid, choice)) , cInt(GFExtractData(timer6.keyid, choice)) };
gatedest := {cInt(GFExtractData( newgatedestx.keyid, choice)),cInt(GFExtractData( newgatedesty.keyid, choice)),cInt(GFExtractData( newgatedestz.keyid, choice)),cInt(GFExtractData( newreturngate.keyid, choice))};
SetObjProperty(championSpawn, "skulls", notifiers);
SetObjProperty(championSpawn, "times", times);
SetObjProperty(championSpawn, "radius", cInt(GFExtractData(newradius.keyid, choice)));
SetObjProperty(championSpawn, "dispel", cInt(GFExtractData(newdispel.keyid, choice)));
notifiercolours := {thecolour1, thecolour2, thecolour3, thecolour4, thecolour5};
SetObjProperty(championSpawn, "colours", notifiercolours);
SetObjProperty(championSpawn, "gatedest", gatedest);
SetObjProperty(championSpawn, "unlock", cInt(GFExtractData(newunlock.keyid, choice)));
SetObjProperty(championSpawn, "script", GFExtractData(newscript.keyid, choice));
SetObjProperty(championSpawn, "endDuration", cint(GFExtractData(newendDuration.keyid, choice)));
SetObjProperty(championSpawn, "resetHours", cint(GFExtractData(newresetHours.keyid, choice)));


if (choice[newgcenable.keyid])
  SetObjProperty(championSpawn, "gcenable", 1);
else
  SetObjProperty(championSpawn, "gcenable", 0);
endif 
if (choice[newgcloot.keyid])
  SetObjProperty(championSpawn, "gcloot", 1);
else
  SetObjProperty(championSpawn, "gcloot", 0);
endif 
if (choice[newcheckLOS.keyid])
  SetObjProperty(championSpawn, "checkLOS", 1);
else
  SetObjProperty(championSpawn, "checkLOS", 0);
endif  
if (choice[newnoLoot.keyid])
  SetObjProperty(championSpawn, "noLoot", 1);
else
  SetObjProperty(championSpawn, "noLoot", 0);
endif  

SetObjProperty( championSpawn, "LFucker", who.name+who.serial);

if (choice[Round1Button.keyid])
  championSpawnControl( who, championSpawn, 1);
elseif (choice[Round2Button.keyid])
  championSpawnControl( who, championSpawn, 2);
elseif (choice[Round3Button.keyid])
  championSpawnControl( who, championSpawn, 3);
elseif (choice[Round4Button.keyid])
  championSpawnControl( who, championSpawn, 4);
elseif (choice[Round5Button.keyid])
  championSpawnControl( who, championSpawn, 5);
elseif (choice[Round6Button.keyid])
  championSpawnControl( who, championSpawn, 6);
elseif (choice[GeneralButton.keyid])
  championSpawnControl( who, championSpawn, 7);
elseif (choice[EndSeqButton.keyid])
  championSpawnControl( who, championSpawn, 8);
elseif (choice[note1Button.keyid])
   sendsysmessage( who, "Target a new first notifier.");
  var new1target := target(who);
  var newnotifiers := GetObjProperty(championSpawn, "skulls");
  newnotifiers[1] := new1target.serial;
  SetObjProperty( championSpawn, "skulls", newnotifiers);
  championSpawnControl( who, championSpawn, 1);
elseif (choice[note2Button.keyid])
   sendsysmessage( who, "Target a new second notifier.");
  var new2target := target(who);
  var newnotifiers := GetObjProperty(championSpawn, "skulls");
  newnotifiers[2] := new2target.serial;
  SetObjProperty( championSpawn, "skulls", newnotifiers);
  championSpawnControl( who, championSpawn, 2);
elseif (choice[note3Button.keyid])
   sendsysmessage( who, "Target a new third notifier.");
  var new3target := target(who);
  var newnotifiers := GetObjProperty(championSpawn, "skulls");
  newnotifiers[3] := new3target.serial;
  SetObjProperty( championSpawn, "skulls", newnotifiers);
  championSpawnControl( who, championSpawn, 3);
elseif (choice[note4Button.keyid])
   sendsysmessage( who, "Target a new fourth notifier.");
  var new4target := target(who);
  var newnotifiers := GetObjProperty(championSpawn, "skulls");
  newnotifiers[4] := new4target.serial;
  SetObjProperty( championSpawn, "skulls", newnotifiers);
  championSpawnControl( who, championSpawn, 4);
elseif (choice[note5Button.keyid])
   sendsysmessage( who, "Target a new fifth notifier.");
  var new5target := target(who);
  var newnotifiers := GetObjProperty(championSpawn, "skulls");
  newnotifiers[5] := new5target.serial;
  SetObjProperty( championSpawn, "skulls", newnotifiers);
  championSpawnControl( who, championSpawn, 5);
elseif (choice[unlockButton.keyid])
  var newunlocktarget := target(who);
  SetObjProperty( championSpawn, "unlock", newunlocktarget.serial);
  championSpawnControl( who, championSpawn, 8);
elseif (choice[ActivateButton.keyid])
  if (!active || active == 0 )
   SetObjProperty(championSpawn, "active", 1);
   SetObjProperty( championSpawn, "resetCounter", ReadGameClock());
   sendsysmessage( who, "Champion Spawn is enabled");
   championSpawnControl( who, championSpawn, 1);
   return 1;
  elseif (active == 1)
   SetObjProperty(championSpawn, "active", 0);
   sendsysmessage( who, "Champion Spawn is disabled");
   resetSpawn( championSpawn);
   championSpawnControl( who, championSpawn, 1);
   return 0;
  endif
elseif (choice[ExitButton.keyid])
   SetObjProperty( championSpawn, "resetCounter", ReadGameClock());
   EraseObjProperty( championSpawn, "runningscript");
   sendsysmessage( who, "Goodbye.");
   return 0;
endif

endfunction