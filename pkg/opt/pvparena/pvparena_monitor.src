use uo;
use os;

include "pvparena";

program arena_monitor(parms)
	var team1 := parms[1];
	var team2 := parms[2];
	var stone := parms[3];
	var options := parms[4];
	
	var prebless, detect;
	if (BitAnd(options, PVPARENA_OPTION_DETECT))
		detect := 1;
	endif
	if (BitAnd(options, PVPARENA_OPTION_PREBLESS))
		prebless := 1;
	endif
	
	// No Prebless / refresh vitals
	foreach member in team1
		fixStats(member, !prebless);
	endforeach
	foreach member in team2
		fixStats(member, !prebless);
	endforeach
	
	messagePlayers(team1, "You have 4 minutes to fight. Good luck!", 3, 38);
	messagePlayers(team2, "You have 4 minutes to fight. Good luck!", 3, 38);
	
	toggleDoors(stone, "*Fight!*"); // Open the doors, and leave them open until the fight is over.
	
	var finishtime := ReadGameClock() + (4*60); // Give them 4 minutes to finish the fight.
	var whoWon := 0, detectcounter := 3;
	while (!whoWon)
		sleep(10);
		if (detect)
			if (!detectcounter)
				detectHidden(team1, team2);
				detectcounter := 3;
			else
				detectcounter := detectcounter - 1;
			endif
		endif
		
		whoWon := fightOver(team1, team2, finishtime);		
	endwhile

	case (whoWon)
		1:	messagePlayers(team1, "Your team has won the battle!", 3, COLOR_YELLOW);
			messagePlayers(team2, "Your team has lost the battle.", 3, COLOR_YELLOW);
			break;
		2:	messagePlayers(team1, "Your team has lost the battle.", 3, COLOR_YELLOW);
			messagePlayers(team2, "Your team has won the battle!", 3, COLOR_YELLOW);
			break;
		3:	messagePlayers(team1, "It's a draw - everyone's out!", 3, COLOR_YELLOW);
			messagePlayers(team2, "It's a draw - everyone's out!", 3, COLOR_YELLOW);
			break;
		4:	messagePlayers(team1, "It's a draw - you took too long!", 3, COLOR_YELLOW);
			messagePlayers(team2, "It's a draw - you took too long!", 3, COLOR_YELLOW);
	endcase
	
	toggleDoors(stone);
	foreach member in team1
		UpdateTOP10List(stone, member);
	endforeach
	foreach member in team2
		UpdateTOP10List(stone, member);
	endforeach
	cleanup(stone);
endprogram

function toggleDoors(stone, msg := "")
	var i;
	var numdoors := CInt(GetObjProperty(stone, "nDoors"));
	var doors := Unpack(GetObjProperty(stone, "doors"));
	var thedoor;
	for (i := 1; i <= numdoors; i := i + 1)
		thedoor := SystemFindObjectBySerial(doors[i]);
		thedoor.toggle();
		if (msg)
			PrintTextAbove(thedoor, msg);
		endif
	endfor
endfunction

function fightOver(team1, team2, finishtime)
	var i := team1.size(), j := team2.size();
	foreach member in team1
		if (!member || member.dead)
			i := i - 1;
		endif
	endforeach
	
	foreach member in team2
		if (!member || member.dead)
			j := j - 1;
		endif
	endforeach
	
	if (i>0 && j==0)
		foreach member in team1
		var wincount := GetObjProperty(member, "arenawins");
		if (!wincount)
		wincount := 0; 
		endif
		wincount := wincount + 1;

		SetObjProperty(member, "arenawins", wincount);
		endforeach
		return 1; // Team 1 won.

	elseif (i==0 && j>0)
		foreach member in team2
		var wincount := GetObjProperty(member, "arenawins");
		if (!wincount)
		wincount := 0; 
		endif
		wincount := wincount + 1;
		
		SetObjProperty(member, "arenawins", wincount);
		endforeach
		return 2; // Team 2 won.

	elseif (i==0 && j==0)
		return 3; // Draw. Both teams died.
	elseif (finishtime <= ReadGameClock())
		return 4; // Went over time limit.
	endif

	foreach i in ListObjectsInBox(1385, 3758, -20, 1412, 3729, -21)

		if ( (GetHp(i) >= 0) && (!i.acctname) )
			ApplyRawDamage(i, GetHp(i) + 3);
		endif
	endforeach

	// ...and delete items (excluding the corpses).

	foreach i in ListObjectsInBox(1385, 3758, -20, 1412, 3729, -21)
			DestroyItem(i);
	endforeach

	return 0;
endfunction

function detectHidden(team1, team2)
	foreach member in team1
		if (member.hidden)
			member.hidden := 0;
			PrintTextAbove(member, "You have been discovered!");
		endif
	endforeach
	foreach member in team2
		if (member.hidden)
			member.hidden := 0;
			PrintTextAbove(member, "You have been discovered!");
		endif
	endforeach
endfunction

function UpdateTOP10List(stone, member);

	var whoscore := GetObjProperty(member, "arenawins");
	//Broadcast("Arenawins " + whoscore);
	var top10 array;
	top10.+Name:={};
	top10.+Score:={};
	top10.+Serial:={};

	var temparray, temp, i,k;

	//Incialize Variables
	for (i:=1;i<=10;i:=i+1)
	  top10.Name[i]:="";
	  top10.Score[i]:=0;
	  top10.Serial[i]:=0;
	endfor

	//Broadcast("Scores:"+Top10.Score);
	//Broadcast("Names:"+Top10.Name);
	//Broadcast("Serials:"+Top10.serial);

	//Take Names, Serial and Scores  of the Actual TOP 10 List
	top10.Name:=GetObjProperty(stone,"Names");
	//Broadcast("Top10.Name:"+Top10.Name);

	top10.Serial:=GetObjProperty(stone,"PlayerSerials");
	//Broadcast("Top10.Serial:"+Top10.Serial);

	//Take Scores of the Actual TOP 10 List	
	top10.Score:=GetObjProperty(stone,"Scores");
	//Broadcast("Top10.Score:"+Top10.Score);

	if (!top10.Name)
	    top10.Name:={};
	    top10.Serial:={};
	    top10.Score:={};
	    for (i:=1;i<=10;i:=i+1)
	      top10.Name[i]:="";	   
	      top10.Serial[i]:=0;	     
	      top10.Score[i]:=0;	     
	    endfor
	endif

	//Broadcast("Scores:"+Top10.Score);
	//Broadcast("Names:"+Top10.Name);
	//Broadcast("Serials:"+Top10.Serial);	

	//See if player is already in list

	for (i:=1;i<=10;i:=i+1);
	  //If player in the list, update his info
	  if (top10.Serial[i]==CInt(member.serial))
	    top10.Score[i]:=whoscore;
	    top10.Name[i]:=member.name;
	    break;
	  endif
	endfor


	if (i>10) // Player is Not in List
	  // See if there's a Free Space in the list
	   //Broadcast("Not in List");	  
	  for (i:=1;i<=10;i:=i+1);
	    if (!top10.serial[i]);
		//Broadcast("ADDING TO FREE SPACE");
	      top10.serial[i]:=member.serial;
	      top10.name[i]:=member.name;
	      top10.score[i]:=whoscore;
	      break;
	    endif
	  endfor
	  //Broadcast("Names:"+Top10.Name); 
	  //Broadcast("Scores:"+Top10.Score);	  
	  top10:=SortTop10(TOP10);
	  //Broadcast("Scores:"+Top10.Score);
	 
	  // If Player ISN'T in The list, but has a score bigger than the someone in the list
	  // Add him to the list and sort the list again
	  if ( (top10.score[10]<whoscore) && (i>10))
	      TOP10.serial[10]:=member.serial;
	      TOP10.name[10]:=member.name;
	      TOP10.score[10]:=whoscore;
	      top10:=SortTop10(top10);
	  endif
	  else // Player is In List
	    //Broadcast("In List");
	    top10:=SortTop10(top10);
	endif

	SetObjProperty(stone,"Names", top10.Name);
	SetObjProperty(stone,"Scores", top10.Score);
	SetObjProperty(stone,"PlayerSerials", top10.Serial);	
endfunction

//Sorts Top10 Array
function SortTop10(top10);
	//broadcast("SORTING TOP 10");
  var limit :=9;
  var changed;
  var i;
  var aux;
  repeat
    changed:=0;
    for (i:=1;i<=limit;i:=i+1)
      if (top10.Score[i]<top10.Score[i+1])
     
        aux:=top10.Score[i];
        top10.Score[i]:=top10.Score[i+1];
        top10.Score[i+1]:=aux;

        aux:=top10.Name[i];
        top10.Name[i]:=top10.Name[i+1];
        top10.Name[i+1]:=aux;
       
        aux:=top10.Serial[i];
        top10.Serial[i]:=top10.Serial[i+1];
        top10.Serial[i+1]:=aux;
               
        limit:=i;
        changed:=1;
      endif
    endfor
  until (!changed);
  return top10;
endfunction
